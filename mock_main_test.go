// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=mock_main_test.go -package=main -self_package=github.com/wup2slack
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	fastshot "github.com/opus-domini/fast-shot"
	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockFbClient is a mock of FbClient interface.
type MockFbClient struct {
	ctrl     *gomock.Controller
	recorder *MockFbClientMockRecorder
}

// MockFbClientMockRecorder is the mock recorder for MockFbClient.
type MockFbClientMockRecorder struct {
	mock *MockFbClient
}

// NewMockFbClient creates a new mock instance.
func NewMockFbClient(ctrl *gomock.Controller) *MockFbClient {
	mock := &MockFbClient{ctrl: ctrl}
	mock.recorder = &MockFbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFbClient) EXPECT() *MockFbClientMockRecorder {
	return m.recorder
}

// CONNECT mocks base method.
func (m *MockFbClient) CONNECT(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CONNECT", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// CONNECT indicates an expected call of CONNECT.
func (mr *MockFbClientMockRecorder) CONNECT(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CONNECT", reflect.TypeOf((*MockFbClient)(nil).CONNECT), path)
}

// DELETE mocks base method.
func (m *MockFbClient) DELETE(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DELETE", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockFbClientMockRecorder) DELETE(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockFbClient)(nil).DELETE), path)
}

// GET mocks base method.
func (m *MockFbClient) GET(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// GET indicates an expected call of GET.
func (mr *MockFbClientMockRecorder) GET(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockFbClient)(nil).GET), path)
}

// HEAD mocks base method.
func (m *MockFbClient) HEAD(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HEAD", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// HEAD indicates an expected call of HEAD.
func (mr *MockFbClientMockRecorder) HEAD(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockFbClient)(nil).HEAD), path)
}

// OPTIONS mocks base method.
func (m *MockFbClient) OPTIONS(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPTIONS", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockFbClientMockRecorder) OPTIONS(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockFbClient)(nil).OPTIONS), path)
}

// PATCH mocks base method.
func (m *MockFbClient) PATCH(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PATCH", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// PATCH indicates an expected call of PATCH.
func (mr *MockFbClientMockRecorder) PATCH(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockFbClient)(nil).PATCH), path)
}

// POST mocks base method.
func (m *MockFbClient) POST(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// POST indicates an expected call of POST.
func (mr *MockFbClientMockRecorder) POST(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockFbClient)(nil).POST), path)
}

// PUT mocks base method.
func (m *MockFbClient) PUT(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUT", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockFbClientMockRecorder) PUT(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockFbClient)(nil).PUT), path)
}

// TRACE mocks base method.
func (m *MockFbClient) TRACE(path string) *fastshot.RequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TRACE", path)
	ret0, _ := ret[0].(*fastshot.RequestBuilder)
	return ret0
}

// TRACE indicates an expected call of TRACE.
func (mr *MockFbClientMockRecorder) TRACE(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRACE", reflect.TypeOf((*MockFbClient)(nil).TRACE), path)
}

// markWhatsappMessageAsRead mocks base method.
func (m *MockFbClient) markWhatsappMessageAsRead(businessPhoneNumberId, messageId string) (fastshot.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "markWhatsappMessageAsRead", businessPhoneNumberId, messageId)
	ret0, _ := ret[0].(fastshot.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// markWhatsappMessageAsRead indicates an expected call of markWhatsappMessageAsRead.
func (mr *MockFbClientMockRecorder) markWhatsappMessageAsRead(businessPhoneNumberId, messageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "markWhatsappMessageAsRead", reflect.TypeOf((*MockFbClient)(nil).markWhatsappMessageAsRead), businessPhoneNumberId, messageId)
}

// sendWhatsappMessage mocks base method.
func (m *MockFbClient) sendWhatsappMessage(businessPhoneNumberId, to, message, replyToMessage string) (fastshot.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendWhatsappMessage", businessPhoneNumberId, to, message, replyToMessage)
	ret0, _ := ret[0].(fastshot.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sendWhatsappMessage indicates an expected call of sendWhatsappMessage.
func (mr *MockFbClientMockRecorder) sendWhatsappMessage(businessPhoneNumberId, to, message, replyToMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendWhatsappMessage", reflect.TypeOf((*MockFbClient)(nil).sendWhatsappMessage), businessPhoneNumberId, to, message, replyToMessage)
}

// MockSlackClient is a mock of SlackClient interface.
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient.
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance.
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// GetConversationInfo mocks base method.
func (m *MockSlackClient) GetConversationInfo(input *slack.GetConversationInfoInput) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationInfo", input)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfo indicates an expected call of GetConversationInfo.
func (mr *MockSlackClientMockRecorder) GetConversationInfo(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfo", reflect.TypeOf((*MockSlackClient)(nil).GetConversationInfo), input)
}

// getExistingChannel mocks base method.
func (m *MockSlackClient) getExistingChannel(slackUserId, whatsAppPhoneNumber string) (slack.Channel, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getExistingChannel", slackUserId, whatsAppPhoneNumber)
	ret0, _ := ret[0].(slack.Channel)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// getExistingChannel indicates an expected call of getExistingChannel.
func (mr *MockSlackClientMockRecorder) getExistingChannel(slackUserId, whatsAppPhoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getExistingChannel", reflect.TypeOf((*MockSlackClient)(nil).getExistingChannel), slackUserId, whatsAppPhoneNumber)
}

// getSlackChannel mocks base method.
func (m *MockSlackClient) getSlackChannel(linkedAccount *LinkedAccount, initiatorDetails WhatsappInitiatorDetails) (slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSlackChannel", linkedAccount, initiatorDetails)
	ret0, _ := ret[0].(slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSlackChannel indicates an expected call of getSlackChannel.
func (mr *MockSlackClientMockRecorder) getSlackChannel(linkedAccount, initiatorDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSlackChannel", reflect.TypeOf((*MockSlackClient)(nil).getSlackChannel), linkedAccount, initiatorDetails)
}

// initializeNewChannel mocks base method.
func (m *MockSlackClient) initializeNewChannel(initiatorDetails WhatsappInitiatorDetails, linkedAccount *LinkedAccount) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initializeNewChannel", initiatorDetails, linkedAccount)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// initializeNewChannel indicates an expected call of initializeNewChannel.
func (mr *MockSlackClientMockRecorder) initializeNewChannel(initiatorDetails, linkedAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initializeNewChannel", reflect.TypeOf((*MockSlackClient)(nil).initializeNewChannel), initiatorDetails, linkedAccount)
}

// postMessageAsUser mocks base method.
func (m *MockSlackClient) postMessageAsUser(channelId, message, asUserName string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "postMessageAsUser", channelId, message, asUserName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// postMessageAsUser indicates an expected call of postMessageAsUser.
func (mr *MockSlackClientMockRecorder) postMessageAsUser(channelId, message, asUserName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "postMessageAsUser", reflect.TypeOf((*MockSlackClient)(nil).postMessageAsUser), channelId, message, asUserName)
}

// MockLinkedAccountStore is a mock of LinkedAccountStore interface.
type MockLinkedAccountStore struct {
	ctrl     *gomock.Controller
	recorder *MockLinkedAccountStoreMockRecorder
}

// MockLinkedAccountStoreMockRecorder is the mock recorder for MockLinkedAccountStore.
type MockLinkedAccountStoreMockRecorder struct {
	mock *MockLinkedAccountStore
}

// NewMockLinkedAccountStore creates a new mock instance.
func NewMockLinkedAccountStore(ctrl *gomock.Controller) *MockLinkedAccountStore {
	mock := &MockLinkedAccountStore{ctrl: ctrl}
	mock.recorder = &MockLinkedAccountStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkedAccountStore) EXPECT() *MockLinkedAccountStoreMockRecorder {
	return m.recorder
}

// lookupLinkedAccount mocks base method.
func (m *MockLinkedAccountStore) lookupLinkedAccount(id string) (*LinkedAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "lookupLinkedAccount", id)
	ret0, _ := ret[0].(*LinkedAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// lookupLinkedAccount indicates an expected call of lookupLinkedAccount.
func (mr *MockLinkedAccountStoreMockRecorder) lookupLinkedAccount(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "lookupLinkedAccount", reflect.TypeOf((*MockLinkedAccountStore)(nil).lookupLinkedAccount), id)
}
